component groot_error "groot error";

author "Guido HÃ¼ttemann";
license "GPL";

option singleton yes;

pin in bit emc_enable_in;
pin out bit emc_enable_out;

pin in bit emc_on;
pin in bit emc_auto;

pin in bit spindle_enable_in;

pin in bit estop_pendant;
pin in bit estop_external;
pin in bit vfd_err;
pin in bit spindle_temp_err;
pin in bit air_ok;
pin in u32 vfd_error_code;
pin in bit tls_overtravel;

pin in bit axis_fault_a;
pin in bit axis_fault_x;
pin in bit axis_fault_y2;
pin in bit axis_fault_y1;
pin in bit axis_fault_z;

pin in u32 ec_slaves;
pin in u32 ec_slaves_responding;
pin in bit ec_link_up;
pin in bit ec_all_op;

option data groot_err_data;
option extra_setup;

function _;

;;

#define VFD_ERROR_STO  76

typedef struct {
  int last_estop_pendant;
  int last_estop_external;
  int last_vfd_err;
  int last_spindle_temp_err;
  int last_air_ok;
  int last_tls_overtravel;

  int last_axis_fault_a;
  int last_axis_fault_x;
  int last_axis_fault_y1;
  int last_axis_fault_y2;
  int last_axis_fault_z;
  
  int last_auto_err;
  int last_ec_slaves_responding_ok;
  int last_ec_link_up;
  int last_ec_all_op;

} groot_err_data;

EXTRA_SETUP() {
  data.last_estop_pendant = 0;
  data.last_estop_external = 0;
  data.last_vfd_err = 0;
  data.last_air_ok = 1;
  data.last_axis_fault_a = 0;
  data.last_axis_fault_x = 0;
  data.last_axis_fault_y1 = 0;
  data.last_axis_fault_y2 = 0;
  data.last_axis_fault_z = 0;
  data.last_tls_overtravel = 0;
  data.last_auto_err = 0;
  data.last_ec_slaves_responding_ok = 1;
  data.last_ec_link_up = 1;
  data.last_ec_all_op = 1;
  return 0;
}

FUNCTION(_) {
  int ec_slaves_responding_ok;

  emc_enable_out = emc_enable_in;

  // check if emc is on
  if (!emc_on) {
    data.last_estop_pendant = 0;
    data.last_estop_external = 0;
    data.last_vfd_err = 0;
    data.last_spindle_temp_err = 0;
    data.last_air_ok = 1;
    data.last_axis_fault_a = 0;
    data.last_axis_fault_x = 0;
    data.last_axis_fault_y1 = 0;
    data.last_axis_fault_y2 = 0;
    data.last_axis_fault_z = 0;
    data.last_tls_overtravel = 0;
    data.last_auto_err = 0;
    data.last_ec_slaves_responding_ok = 1;
    data.last_ec_link_up = 1;
    data.last_ec_all_op = 1;

    return;
  }



  if (estop_pendant) {
       emc_enable_out = 0;
    if (!data.last_estop_pendant) {
      rtapi_print_msg(RTAPI_MSG_ERR, "E-Stop pendant!\n");
    }
  }
  data.last_estop_pendant = estop_pendant;

  if (estop_external) {
       emc_enable_out = 0;
    if (!data.last_estop_external) {
      
      rtapi_print_msg(RTAPI_MSG_ERR, "Hardware E-Stop safety relay triggered!\n");
    }
  }
  data.last_estop_external = estop_external;

  if (vfd_err && vfd_error_code != VFD_ERROR_STO) {
    emc_enable_out = 0;
    if (!data.last_vfd_err) {
      rtapi_print_msg(RTAPI_MSG_ERR, "Spindle drive error!\n");
    }
  }
  data.last_vfd_err = vfd_err;

  if (spindle_temp_err) {
    emc_enable_out = 0;
    if (!data.last_spindle_temp_err) {
      rtapi_print_msg(RTAPI_MSG_ERR, "Spindle overtemp error!\n");
    }
  }
  data.last_spindle_temp_err = spindle_temp_err;

  if (!air_ok) {
    emc_enable_out = 0;
    if (data.last_air_ok) {
      rtapi_print_msg(RTAPI_MSG_ERR, "Air failure (pressure below treshold)!\n");
    }
  }
  data.last_air_ok = air_ok;

  if (axis_fault_a) {
    emc_enable_out = 0;
    if (data.last_axis_fault_a) {
      rtapi_print_msg(RTAPI_MSG_ERR, "Servo A axis fault!\n");
    }
  }
  data.last_axis_fault_a = axis_fault_a;

  if (axis_fault_x) {
    emc_enable_out = 0;
    if (data.last_axis_fault_x) {
      rtapi_print_msg(RTAPI_MSG_ERR, "Servo X axis fault!\n");
    }
  }
  data.last_axis_fault_x = axis_fault_x;

  if (axis_fault_y1) {
    emc_enable_out = 0;
    if (data.last_axis_fault_y1) {
      rtapi_print_msg(RTAPI_MSG_ERR, "Servo Y1 axis fault!\n");
    }
  }
  data.last_axis_fault_y1 = axis_fault_y1;

  if (axis_fault_y2) {
    emc_enable_out = 0;
    if (data.last_axis_fault_y2) {
      rtapi_print_msg(RTAPI_MSG_ERR, "Servo Y2 axis fault!\n");
    }
  }
  data.last_axis_fault_y2 = axis_fault_y2;

  if (axis_fault_z) {
    emc_enable_out = 0;
    if (data.last_axis_fault_z) {
      rtapi_print_msg(RTAPI_MSG_ERR, "Servo Z axis fault!\n");
    }
  }
  data.last_axis_fault_z = axis_fault_z;


  if (tls_overtravel) {
    emc_enable_out = 0;
    if (data.last_tls_overtravel) {
      rtapi_print_msg(RTAPI_MSG_ERR, "Tool Lenght Sensor Overtravel!\n");
    }
  }
  data.last_tls_overtravel = tls_overtravel;

  if ((emc_auto || spindle_enable_in)) {
    emc_enable_out = 0;
    if (!data.last_auto_err) {
      rtapi_print_msg(RTAPI_MSG_ERR, "Automatic mode disabled!\n");
    }
    data.last_auto_err = 1;
  } else {
    data.last_auto_err = 0;
  }

  ec_slaves_responding_ok = (ec_slaves_responding == ec_slaves);
  if (!ec_slaves_responding_ok) {
    emc_enable_out = 0;
    if (data.last_ec_slaves_responding_ok) {
      rtapi_print_msg(RTAPI_MSG_ERR, "EtherCAT: Not all %d slaves responding!\n", ec_slaves);
    }
  }
  data.last_ec_slaves_responding_ok = ec_slaves_responding_ok;

  if (!ec_link_up) {
    emc_enable_out = 0;
    if (data.last_ec_link_up) {
      rtapi_print_msg(RTAPI_MSG_ERR, "EtherCAT: Link down!\n");
    }
  }
  data.last_ec_link_up = ec_link_up;

  if (!ec_all_op) {
    emc_enable_out = 0;
    if (data.last_ec_all_op) {
      rtapi_print_msg(RTAPI_MSG_ERR, "EtherCAT: Not all slaves in OP mode!\n");
    }
  }
  data.last_ec_all_op = ec_all_op;
}